import com.google.gson.Gson
import com.google.gson.JsonElement
import com.google.gson.JsonObject

plugins {
	id 'java'
	id 'maven-publish'

	id 'idea'
	id 'eclipse'
	id("fabric-loom") version "0.2.4-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "okyanus-1.14.3"

// Fetch build number from Jenkins
version = "0.1.0"

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = 'Fabric'
		url = 'http://maven.modmuss50.me/'
	}
	maven {
		name = 'SpongePowered'
		url = 'http://repo.spongepowered.org/maven'
	}
	maven {
		name = 'mojang'
		url = 'https://libraries.minecraft.net/'
	}
}

configurations {
	fatJar
	compile.extendsFrom fatJar
}

dependencies {
	minecraft "com.mojang:minecraft:1.14.3"
	mappings "net.fabricmc:yarn:1.14.3+build.1"

	// Minecraft's JAR uses these annotations
	compile 'com.google.code.findbugs:jsr305:3.0.2'

	// fabric-loader dependencies
	compile 'org.ow2.asm:asm:7.1'
	compile 'org.ow2.asm:asm-analysis:7.1'
	compile 'org.ow2.asm:asm-commons:7.1'
	compile 'org.ow2.asm:asm-tree:7.1'
	compile 'org.ow2.asm:asm-util:7.1'

	compile('net.fabricmc:sponge-mixin:0.7.11.36') {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}
	compile 'net.fabricmc:tiny-mappings-parser:0.1.1.8'
	compile 'net.fabricmc:tiny-remapper:0.1.0.33'

	compile 'com.google.jimfs:jimfs:1.1'
	compile 'net.fabricmc:fabric-loader-sat4j:2.3.5.4'

	// launchwrapper + dependencies
	compile ('net.minecraft:launchwrapper:1.12') {
		transitive = false
	}

	compile 'net.sf.jopt-simple:jopt-simple:5.0.3'

	fatJar 'com.google.code.gson:gson:2.8.0'
	fatJar 'org.javassist:javassist:3.25.0-GA'
}

processResources {
	inputs.property "version", version

	from(sourceSets.main.resources.srcDirs) {
		include 'okyanus.json'
		expand 'version':version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'okyanus.json'
	}
}

jar {
	manifest {
		attributes (
			'Main-Class': 'net.fabricmc.loader.launch.server.FabricServerLauncher'
		)
	}
	from {
		configurations.fatJar.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

task copyJson(type: Copy, dependsOn: ["remapJar"]) {
	from('src/main/resources/fabric-installer.json') {
		rename { "${archivesBaseName}-${version}.json" }
	}
	into 'build/libs'
}

task copyJsonLw(type: Copy, dependsOn: ["remapJar"]) {
	from('src/main/resources/fabric-installer.launchwrapper.json') {
		rename { "${archivesBaseName}-${version}.launchwrapper.json" }
	}
	into 'build/libs'
}

tasks.build.dependsOn "copyJson"
tasks.build.dependsOn "copyJsonLw"

task wrapper(type: Wrapper) {
	gradleVersion = '4.10.3'
}

String getClasspathEntries(){
	String classPath = ""
	File installerFile = file("src/main/resources/fabric-installer.json")
	JsonObject object = Gson.newInstance().fromJson(new InputStreamReader(new FileInputStream(installerFile)), JsonObject.class)

	["common", "server"].forEach { l ->
		for (JsonElement element : object.getAsJsonObject("libraries").getAsJsonArray(l)) {
			String dep = element.getAsJsonObject().get("name").getAsString()
			String[] depSplit = dep.split(":")
			if (depSplit.length != 3) throw new RuntimeException("Invalid dependency " + dep);
			classPath = classPath + " libs/" + depSplit[1] + "-" + depSplit[2] + ".jar"
		}
	}

	return classPath;
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'
